{"version":3,"sources":["components/session-managment/utils.js","components/dashboards/nav-bar-user.js","components/sign-in/FacebookLogin/FacebookLoginButton.js","components/dashboards/navbar-Cov.js","components/validation/validatable-field.js","hooks/custom-hooks.js","services/sessions.js","components/sign-in/login-incorrect.js","components/sign-in/sign-in.js","components/sign-up/sign-up.js","components/home/home.js","components/dashboards/comparison-dashboard/comparison-dashboard.js","components/dashboards/countries-dashboard.js","components/lists/addCountry.js","components/lists/list-item.js","components/dashboards/lists-dashboards.js","components/dashboards/page-not-found.js","components/session-managment/private-route.js","components/dashboards/menu-item.js","components/users/side-menu-user.js","components/admin/side-menu-admin.js","components/side-menu/side-menu.js","components/admin/users-info/ListsCountriesTable.js","components/admin/users-info/CheckUserInfoButton.js","components/admin/users-info/UsersInfo.js","components/admin/list-info/DropMenuOfRegisteredLists.js","components/admin/list-info/ListsOfCountriesInfo.js","components/admin/countries-info/CheckNumberOfInterestedUsersButton.js","components/admin/countries-info/CountriesTable.js","components/app/app.js","components/admin/compare-lists-of-different-users/CompareListsOfDifferentUsers.js","service-worker.js","index.js"],"names":["isUserLogin","localStorage","getItem","getUserTokens","JSON","parse","getUserAccessToken","access_token","logOut","axios","create","baseURL","process","REACT_APP_API_BASE_URL","timeout","headers","post","then","response","console","log","catch","error","removeItem","getUserTypeFromLocalStorage","idToken","id_token","jwtDecode","user_type","NavBarUserComponent","userIcon","icon","faUser","email","getUserEmailFromLocalStorage","FacebookLoginButton","fbContent","userInfo","isLoggedIn","accessToken","userID","name","appId","autoLoad","fields","callback","status","setItem","stringify","data","size","NavBarComponent","props","useState","id","params","isUserLogged","className","style","zIndex","to","textAlign","width","onClick","ValidatableField","this","rest","errorMessages","validators","requiredError","validatorListener","ref","r","input","errorText","state","isValid","color","getErrorMessage","ValidatorComponent","useSignUpForm","initialValues","inputs","setInputs","handleSubmit","event","preventDefault","handleInputChange","persist","target","value","axiosInstance","require","default","AlertPasswordIncorrectComponent","passwordIncorrect","role","SignInComponent","isPasswordIncorrect","setIsPasswordIncorrect","password","attributes","res","userType","setRedirect","alert","redirect","formRedirect","onSubmit","instantValidate","onChange","label","placeholder","type","loginResult","SignUpComponent","firstName","lastName","password1","password2","ValidatorForm","addValidationRule","href","HomeComponent","lodash","useStyles","makeStyles","theme","chips","display","flexWrap","chip","margin","getStyles","fontWeight","indexOf","typography","fontWeightRegular","fontWeightMedium","MenuProps","PaperProps","maxHeight","ITEM_HEIGHT","ComparisonComponent","classes","useTheme","getDependantDataArrayByProperty","someArray","flatMap","someData","getCountriesFromList","someList","countriesIds","countriesList","filter","someCountry","includes","flag","timeseries","isCountryListDisabled","listSelect","selectedItemsFirst","selectedItemsSecond","selectedObjectsSecond","selection","setOtherParams","getListFromId","someListArray","someListId","find","countries","changeSelection","someSelection","Object","assign","getUserLists","a","tokens","fetch","method","mock","json","result","list","length","map","populateLists","someListsList","forEach","aList","queryOffset","offsetsquery","countriesWithOffset","handleOffsetChange","countryId","countriesInSelect","countryMapped","offset","x","c","join","countriesWithOffset1","useEffect","FetchData","flexFlow","marginTop","FormControl","formControl","maxWidth","minWidth","marginInlineEnd","InputLabel","Select","labelId","Math","random","toString","slice","Input","MenuItem","key","multiple","selectObjects","undefined","someObject","flexGrow","Grid","container","spacing","alignItems","item","xs","demo","List","ListItem","ListItemText","primary","y","onKeyUp","e","defaultValue","marginBottom","Button","variant","marginLeft","height","someCountries","allTimeSeries","someTimeSerie","countryName","deaths","recovered","confirmed","date","mapTimeSeriesForGraphic","groupedTimeSeries","groupBy","timeSeriesForGraphic","keys","someDate","seriesFromThatDate","jsonForGraphic","someSerie","orderBy","getTimeSeriesForGraphic","top","right","left","bottom","strokeDasharray","dataKey","connectNulls","stroke","activeDot","CountriesComponent","addCountry","content","flexDirection","padding","title","alignSelf","editButton","AddCountryDialog","openCountryDialog","newCountry","showError","setParams","React","selectedCountry","selectCountry","setCountries","get","listOfCountries","fetchData","Dialog","open","onClose","closeCountryModal","aria-labelledby","Paper","DialogTitle","DialogContent","Autocomplete","options","option","country","autoHighlight","getOptionLabel","renderInput","TextField","autoComplete","DialogActions","fontSize","editTitle","backgroundColor","borderRadius","ListItemComponent","editMode","listName","listId","listItems","openDialog","uploadList","values","put","closeModal","getListInfo","location","pathname","split","listInfo","response2","formik","useFormik","validate","errors","enableReinitialize","validateOnChange","validateOnBlur","onBlur","handleBlur","handleChange","row","ListItemIcon","countryList","splice","findIndex","faPlus","push","wrapper","paddingTop","paper","breakpoints","up","listItem","createData","ListsComponent","newListCountries","postList","message","listOfLists","window","reload","button","component","Link","NotFoundPage","PrivateRoute","Component","render","MenuItemComponent","anIcon","urlRef","anId","aTitle","acolor","setparams","onMouseEnter","onMouseLeave","tabIndex","styles","bmBurgerButton","position","bmBurgerBars","background","bmBurgerBarsHover","bmCrossButton","bmCross","bmMenuWrap","bmMenu","bmMorphShape","fill","bmItemList","bmItem","bmOverlay","SideMenuUserComponent","chartIcon","faChartBar","countryIcon","faGlobeAmericas","listIcon","faList","outerContainerId","pageWrapId","SideMenuAdminComponent","SideMenuComponent","root","columns","align","ListsCountriesTable","page","setPage","rowsPerPage","setRowsPerPage","rows","lists","objectList","numberOfCountries","countries_amount","createdAt","created_at","TableContainer","Table","stickyHeader","aria-label","TableHead","TableRow","column","TableCell","TableBody","hover","code","TablePagination","rowsPerPageOptions","count","onChangePage","newPage","onChangeRowsPerPage","CheckUserInfoButton","setOpen","setUserInfo","handleClose","userId","aria-describedby","userEmail","DialogContentText","UsersInfo","setRows","listOfUsers","usersRows","user","lastAccess","checkInfoUserButton","last_access","fetchUsers","DropMenuOfRegisteredLists","Date","selectedDate","setSelectedDate","amount","setAmount","openWindowDialog","setOpenWindowDialog","originOfTime","days","differenceInDays","listsOfListOfCountries","amountOfLists","handleCloseWindowDialog","onOpen","subDays","toLocaleDateString","ListsOfCountriesInfo","utils","DateFnsUtils","justify","format","KeyboardButtonProps","disableFuture","minDate","orientation","CheckNumberOfInterestedUsersButton","idCountry","iso2","toTimeString","CountriesTable","countriesRows","src","iso_2","alt","buttonCheckAmount","AppComponent","setUserType","exact","path","PageNotFound","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9d3c090b.chunk.js","sourcesContent":["import jwtDecode from \"jwt-decode\";\r\nimport axios from 'axios';\r\n\r\nexport const regularUser = \"regular\";\r\nexport const adminUser = \"admin\";\r\n\r\nexport const isUserLogin = () => {\r\n    if (localStorage.getItem(\"userInfo\") == null)\r\n        return false;\r\n    return true;\r\n}\r\n\r\nexport const getUserTokens = () => JSON.parse(localStorage.getItem(\"userInfo\"));\r\nexport const getUserAccessToken = () => getUserTokens().access_token;\r\n\r\nexport const logOut = () => {\r\n    const axiosInstance = axios.create({\r\n        baseURL: process.env.REACT_APP_API_BASE_URL,\r\n        timeout: 1000,\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': getUserTokens().access_token,\r\n        }\r\n    });\r\n\r\n    axiosInstance.post('/sessions/logout')\r\n        .then(response => {\r\n            console.log(\"The response to /logout was...\");\r\n            console.log(response);\r\n        })\r\n        .catch(error => {\r\n            console.log(\"An error has occurred when post to /logout...\");\r\n            console.log(error);\r\n        });\r\n\r\n    localStorage.removeItem(\"userInfo\");\r\n}\r\n\r\nexport const getUserEmailFromLocalStorage = () => {\r\n    const idToken = getUserTokens().id_token;\r\n    const idTokenDecoded = jwtDecode(idToken);\r\n    const email = idTokenDecoded.email;\r\n    return email;\r\n}\r\n\r\nexport const getUserTypeFromLocalStorage = () => {\r\n    try {\r\n        const idToken = getUserTokens().id_token;\r\n        const idTokenDecoded = jwtDecode(idToken);\r\n        const userType = idTokenDecoded.user_type;\r\n        return userType;\r\n    } catch {\r\n        return null;\r\n    }\r\n}","import React from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faUser } from '@fortawesome/free-solid-svg-icons'\nimport { getUserEmailFromLocalStorage } from './../session-managment/utils'\n\nconst NavBarUserComponent = () => {\n    const userIcon = <FontAwesomeIcon icon={faUser} />\n\n    return (\n        <div>\n            <h6>\n                {userIcon}\n                <p>{getUserEmailFromLocalStorage()}</p>\n            </h6>\n        </div>\n    )\n}\n\nexport default NavBarUserComponent;","import React, { useState } from 'react'\nimport FacebookLogin from 'react-facebook-login';\nimport axios from 'axios';\n\nconst FacebookLoginButton = () => {\n\n    let userInfo = {\n        isLoggedIn: false,\n        accessToken: '',\n        userID: '',\n        name: '',\n        email: '',\n    };\n\n    const responseFacebook = (response) => {\n        if (response.status !== \"unknown\") {\n            userInfo = {\n                isLoggedIn: true,\n                accessToken: response.accessToken,\n                userID: response.userID,\n                name: response.name,\n                email: response.email,\n            };\n        }\n\n        const axiosInstance = axios.create({\n            baseURL: process.env.REACT_APP_API_BASE_URL,\n            timeout: 1000,\n            headers: {\n                'Content-Type': 'application/json',\n                'x-external-access-token': userInfo.accessToken,\n                'x-external-provider-name': 'facebook',\n            }\n        });\n\n        axiosInstance.post('/sessions/external_login')\n            .then(response => {\n                console.log(\"The response to /external_login was...\");\n                console.log(response);\n                if (response.status == 200) {\n                    localStorage.setItem('userInfo', JSON.stringify(response.data));\n                }\n            })\n            .catch(error => {\n                console.log(\"An error has occurred when post to /external_login...\");\n                console.log(error);\n            });\n    }\n\n    let fbContent;\n\n    if (userInfo.isLoggedIn) {\n        fbContent = (\n            <div>\n                {userInfo.email}\n            </div>\n        );\n    }\n    else {\n        fbContent = (\n            <FacebookLogin\n                appId=\"721629975046207\"\n                autoLoad={false}\n                fields=\"name,email\"\n                callback={responseFacebook}\n                size=\"small - small - metro\"\n            />\n        );\n    }\n\n    return (\n        <div>\n            {fbContent}\n        </div>\n    )\n}\n\nexport default FacebookLoginButton;","import React, { useState } from \"react\";\nimport { NavLink } from 'react-router-dom'\nimport { isUserLogin, logOut } from '../session-managment/utils'\nimport NavBarUserComponent from '../dashboards/nav-bar-user'\nimport FacebookLoginButton from '../sign-in/FacebookLogin/FacebookLoginButton'\n\nconst NavBarComponent = (props) => {\n    const [params, setParams] = useState({ id: props.id });\n\n    const navBar = props.isUserLogged ?\n        <nav className=\"navbar navbar-expand-lg navbar-light fixed-top\" style={{ zIndex: \"900\" }} id={params.id}  >\n            <div className=\"container\" id=\"inner-container\" >\n\n                <NavLink className=\"navbar-brand\" to={\"/\"} style={{ textAlign: \"right\", width: \"600px\" }}> Covid 19 - TACS - G2 </NavLink>\n                <div className=\"collapse navbar-collapse\" id=\"navbarTogglerDemo02\">\n                    <ul className=\"navbar-nav ml-auto\">\n                        <li className=\"nav-item\">\n                            <NavBarUserComponent />\n                        </li>\n                        <li className=\"nav-item\">\n                            <NavLink className=\"nav-link\" to={\"/sign-in\"} onClick={logOut}>Log out</NavLink>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n        :\n        <nav className=\"navbar navbar-expand-lg navbar-light fixed-top\" style={{ zIndex: \"900\" }} id={params.id}  >\n            <div className=\"container\" id=\"inner-container\" >\n\n                <NavLink className=\"navbar-brand\" to={\"/\"} style={{ textAlign: \"right\", width: \"600px\" }}> Covid 19 - TACS - G2 </NavLink>\n                <div className=\"collapse navbar-collapse\" id=\"navbarTogglerDemo02\">\n                    <ul className=\"navbar-nav ml-auto\">\n                        <li className=\"nav-item\">\n                            <NavLink className=\"nav-link\" to={\"/home\"}><FacebookLoginButton /></NavLink>\n                        </li>\n                        <li className=\"nav-item\">\n                            <NavLink className=\"nav-link\" to={\"/sign-in\"}>Sign in</NavLink>\n                        </li>\n                        <li className=\"nav-item\">\n                            <NavLink className=\"nav-link\" to={\"/sign-up\"}>Sign up</NavLink>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n    return navBar;\n\n};\nexport default NavBarComponent;","import React from 'react';\nimport { ValidatorComponent } from 'react-form-validator-core';\n\nclass ValidatableField extends ValidatorComponent {\n\n    render() {\n        const { errorMessages, validators, requiredError, validatorListener, ...rest } = this.props;\n\n        return (\n            <div>\n                <input\n                    {...rest}\n                    ref={(r) => { this.input = r; }}\n                />\n                {this.errorText()}\n            </div>\n        );\n    }\n\n    errorText() {\n        const { isValid } = this.state;\n\n        if (isValid) {\n            return null;\n        }\n\n        return (\n            <div style={{ color: 'red' }}>\n                {this.getErrorMessage()}\n            </div>\n        );\n    }\n}\n\nexport default ValidatableField;","import {useState} from 'react';\n\nconst useSignUpForm = (initialValues, callback) => {\n  const [inputs, setInputs] = useState(initialValues);\n  const handleSubmit = (event) => {\n    if (event) event.preventDefault();\n      callback();\n  }\n  const handleInputChange = (event) => {\n    event.persist();\n    setInputs(inputs => ({...inputs, [event.target.name]: event.target.value}));\n  }\n  return {\n    handleSubmit,\n    handleInputChange,\n    inputs\n  };\n}\nexport default useSignUpForm;","const axios = require('axios').default;\n\nconst axiosInstance = axios.create({\n  baseURL: process.env.REACT_APP_API_BASE_URL,\n  timeout: 1000,\n  headers: { 'Content-Type': 'application/json' }\n});\n\nconst salt = 10;\n\nexport const SignUp = (attributes) => {\n  return axiosInstance.post('/users',\n    JSON.stringify(\n      {\n        'name': attributes.firstName,\n        'last_name': attributes.lastName,\n        'email': attributes.email,\n        'password': attributes.password1\n      }\n    ));\n}\n\nexport const SignIn = (attributes) => {\n  return axiosInstance.post('/sessions/login',\n    JSON.stringify(\n      {\n        'email': attributes.email,\n        'password': attributes.password\n      }\n    ));\n}","import React, { useState } from \"react\";\n\nconst AlertPasswordIncorrectComponent = (props) => {\n    return (\n        props.passwordIncorrect ?\n            <div>\n                <br />\n                <div className=\"alert alert-danger\" role=\"alert\">\n                    Incorrect password!\n                </div>\n            </div>\n            :\n            null\n        // Return null to avoid component rendering\n        // https://reactjs.org/docs/conditional-rendering.html#preventing-component-from-rendering\n    )\n}\n\nexport default AlertPasswordIncorrectComponent;","import React, { useState, useEffect } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { ValidatorForm } from \"react-form-validator-core\";\nimport ValidatableField from \"../validation/validatable-field\";\nimport useSignUpForm from \"../../hooks/custom-hooks\";\nimport { SignIn } from \"../../services/sessions\";\nimport AlertPasswordIncorrectComponent from \"../sign-in/login-incorrect\";\nimport jwtDecode from \"jwt-decode\";\nimport { getUserTypeFromLocalStorage } from '../session-managment/utils';\n\nconst SignInComponent = () => {\n\n    const [isPasswordIncorrect, setIsPasswordIncorrect] = useState(false);\n    const [wasRefreshed, setWasRefreshed] = useState(false);\n\n    const signIn = () => {\n        return SignIn(inputs)\n            .then((res) => {\n                if (res.status == 200) {\n                    localStorage.setItem('userInfo', JSON.stringify(res.data));\n                    const userType = getUserTypeFromLocalStorage();\n                    if (userType === \"regular\")\n                        setRedirect('/graphics');\n                    else if (userType === \"admin\")\n                        setRedirect('/admin/users');\n                }\n            })\n            .catch((error) => { // Incorrect password (Error 401)\n                alert(error)\n                setIsPasswordIncorrect(true);\n                // setRedirect('/sign-in');\n            });\n    }\n\n    const { inputs, handleInputChange, handleSubmit } = useSignUpForm(\n        { email: '', password: '' }, signIn\n    );\n\n    const [redirect, setRedirect] = useState('');\n    const formRedirect = redirect ? <Redirect to={redirect} /> :\n        <div>\n            <ValidatorForm\n                onSubmit={handleSubmit}\n                instantValidate={false}\n            >\n                <h3>Sign in</h3>\n\n                <div className=\"form-group\">\n                    <label>Email</label>\n                    <ValidatableField\n                        onChange={handleInputChange}\n                        label='Email'\n                        placeholder='Email'\n                        name=\"email\"\n                        value={inputs.email}\n                        validators={['required', 'isEmail']}\n                        errorMessages={['This field is required', 'Email is not valid']}\n                        type=\"text\"\n                        className=\"form-control\"\n                    />\n                </div>\n\n                <div className=\"form-group\">\n                    <label>Password</label>\n                    <ValidatableField\n                        onChange={handleInputChange}\n                        label='Password'\n                        placeholder='Password'\n                        name=\"password\"\n                        value={inputs.password}\n                        validators={['required', 'isString']}\n                        errorMessages={['This field is required', 'Password is not valid']}\n                        type=\"password\"\n                        className=\"form-control\"\n                    />\n                </div>\n\n                <button type=\"submit\" className=\"btn btn-primary btn-block\">Sign in</button>\n\n            </ValidatorForm>\n            <AlertPasswordIncorrectComponent loginResult={isPasswordIncorrect} />\n        </div>\n\n    return (\n        <div className=\"auth-wrapper\">\n            <div className=\"auth-inner\">\n                {formRedirect}\n            </div>\n        </div>\n    );\n}\n\n\nexport default SignInComponent;","import React, { useState } from \"react\";\nimport { ValidatorForm } from 'react-form-validator-core';\nimport { Redirect } from 'react-router-dom';\nimport useSignUpForm from '../../hooks/custom-hooks';\nimport ValidatableField from '../validation/validatable-field';\nimport { SignUp } from '../../services/sessions';\n\nconst SignUpComponent = () => {\n\n    const [redirect, setRedirect] = useState('');\n\n    const signUp = () => {\n        return SignUp(inputs)\n            .then((res) => {\n                setRedirect('/sign-in');\n            })\n            .catch(alert);\n    }\n\n    const { inputs, handleInputChange, handleSubmit } = useSignUpForm(\n        { firstName: '', lastName: '', email: '', password1: '', password2: '' }, signUp\n    );\n\n    ValidatorForm.addValidationRule('passwordMatch', (value) => {\n        return value === inputs.password1;\n\n    });\n    const formRedirect = redirect ? <Redirect to={redirect} /> :\n\n        <ValidatorForm\n            onSubmit={handleSubmit}\n            instantValidate={false}\n        >\n            <h3>Sign up</h3>\n\n            <div className=\"form-group\">\n                <label>First name</label>\n                <ValidatableField\n                    onChange={handleInputChange}\n                    label='First name'\n                    placeholder='First name'\n                    name=\"firstName\"\n                    value={inputs.firstName}\n                    validators={['required', 'matchRegexp:^[A-Za-zÀ-ÖØ-öø-ÿ ]*$']}\n                    errorMessages={['This field is required', 'First name is not valid']}\n                    type=\"text\"\n                    className=\"form-control\"\n                />\n            </div>\n\n            <div className=\"form-group\">\n                <label>Last name</label>\n                <ValidatableField\n                    onChange={handleInputChange}\n                    label='Last name'\n                    placeholder='Last name'\n                    name=\"lastName\"\n                    value={inputs.lastName}\n                    validators={['required', 'matchRegexp:^[A-Za-zÀ-ÖØ-öø-ÿ ]*$']}\n                    errorMessages={['This field is required', 'Last name is not valid']}\n                    type=\"text\"\n                    className=\"form-control\"\n                />\n            </div>\n\n            <div className=\"form-group\">\n                <label>Email</label>\n                <ValidatableField\n                    onChange={handleInputChange}\n                    label='Email'\n                    placeholder='Email'\n                    name=\"email\"\n                    value={inputs.email}\n                    validators={['required', 'isEmail']}\n                    errorMessages={['This field is required', 'Email is not valid']}\n                    type=\"text\"\n                    className=\"form-control\"\n                />\n            </div>\n\n            <div className=\"form-group\">\n                <label>Password</label>\n                <ValidatableField\n                    onChange={handleInputChange}\n                    label='Password'\n                    placeholder='Password'\n                    name=\"password1\"\n                    value={inputs.password1}\n                    validators={['required', 'isString']}\n                    errorMessages={['This field is required', 'Password is not valid']}\n                    type=\"password\"\n                    className=\"form-control\"\n                />\n            </div>\n\n            <div className=\"form-group\">\n                <label>Confirm password</label>\n                <ValidatableField\n                    onChange={handleInputChange}\n                    label='Confirm password'\n                    placeholder='Password'\n                    name=\"password2\"\n                    value={inputs.password2}\n                    validators={['required', 'isString', 'passwordMatch']}\n                    errorMessages={['This field is required', 'Password is not valid', 'Passwords do not match']}\n                    type=\"password\"\n                    className=\"form-control\"\n                />\n            </div>\n\n            <button type=\"submit\" className=\"btn btn-primary btn-block\">Sign Up</button>\n            <p className=\"forgot-password text-right\">\n                Already registered? <a href={\"/sign-in\"}>Sign in!</a>\n            </p>\n\n        </ValidatorForm>\n\n    return (\n        <div className=\"auth-wrapper\">\n            <div className=\"auth-inner\">\n                {formRedirect}\n\n            </div> </div>\n    );\n}\n\nexport default SignUpComponent;","import React from 'react';\n\nfunction HomeComponent() {\n    return (\n        <h1>HOME</h1>\n    );\n}\n\nexport default HomeComponent;","import React, { useState, useEffect } from 'react'\nimport Button from '@material-ui/core/Button';\nimport {\n    LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend,\n} from 'recharts';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\n\nimport Grid from '@material-ui/core/Grid';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport { makeStyles, useTheme } from '@material-ui/core/styles'\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Input from '@material-ui/core/Input';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport TextField from '@material-ui/core/TextField';\nconst lodash = require('lodash');\nconst useStyles = makeStyles((theme) => ({\n    chips: {\n        display: 'flex',\n        flexWrap: 'wrap',\n    },\n    chip: {\n        margin: 2,\n    }\n}));\n\n\nfunction getStyles(name, params, theme) {\n\n    return {\n        fontWeight:\n            params.indexOf(name) === -1\n                ? theme.typography.fontWeightRegular\n                : theme.typography.fontWeightMedium,\n    };\n}\nconst ITEM_HEIGHT = 80;\nconst ITEM_PADDING_TOP = 20;\nconst MenuProps = {\n    PaperProps: {\n        style: {\n            maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n            width: 80,\n        },\n    },\n};\nconst ComparisonComponent = (props) => {\n\n    const classes = useStyles();\n    const theme = useTheme();\n    const handleChangeFirst = (event) => {\n        // console.log(\"handleChangeFirst\");\n        // console.log(params);\n        // console.log(event.target.value);\n        if (event.target.value == []) setOtherParams(Object.assign({}, params, { selectedItemsFirst: event.target.value, isCountryListDisabled: true, selectedItemsSecond: [] }));\n\n        const countries = getDependantDataArrayByProperty(params.listSelect.filter((x) => (event.target.value.includes(x.name))));\n        console.log(\"countries\");\n        console.log(countries);\n\n        countries.map((x) => { x[\"color\"] = \"#\" + ('00000' + (Math.random() * (1 << 24) | 0).toString(16)).slice(-6); return x; });\n        setOtherParams(Object.assign({}, params, { selectedItemsFirst: event.target.value, isCountryListDisabled: false, selectedItemsSecond: [], selectedObjectsSecond: [], countriesList: countries }));\n\n    };\n    const handleChangeSecond = (event) => {\n        // console.log(\"handleChangeSecond\")\n        // console.log(event.target.value);\n        // console.log(\"params\");\n        // console.log(params);\n        const selectObjects = getCountriesFromList(getListFromId(params.listSelect, !params.selectedItemsFirst[0] ? undefined : params.selectedItemsFirst[0].id), event.target.value);\n        // console.log(\"select objects\")\n        // console.log(selectObjects);\n        selectObjects.map((someObject) => { someObject[\"offset\"] = !someObject[\"offset\"] ? 0 : someObject[\"offset\"]; return someObject; });\n        setOtherParams(Object.assign({}, params, { selectedItemsSecond: event.target.value, selectedObjectsSecond: selectObjects }));\n    }\n    const getDependantDataArrayByProperty = (someArray) => {\n        return someArray.flatMap((someData) => (someData[\"countries\"]));\n    }\n    const getCountriesFromList = (someList, countriesIds) => {\n        console.log(\"someList\"); console.log(someList); console.log(countriesIds);\n        if (!someList || !countriesIds) return [{ id: 0, name: \"error\", flag: \"https://image.shutterstock.com/image-vector/original-simple-argentina-flag-isolated-260nw-516324706.jpg\", timeseries: [] }];\n        return params.countriesList.filter((someCountry) => (countriesIds.includes(someCountry.id)));\n    }\n    const [params, setOtherParams] = useState({\n        isCountryListDisabled: true, listSelect: [], countriesList: [], selectedItemsFirst: [],\n        selectedItemsSecond: [], selectedObjectsSecond: [], selection: \"deaths\"\n    })\n    const getListFromId = (someListArray, someListId) => {\n        // console.log(\"getListFromId\");\n        // console.log(someListArray);\n        // console.log(someListId);\n        if (!someListArray || !someListId) return [{ countries: [] }];\n        return someListArray.find((someList) => someList.name == someListId)\n    };\n    const mapTimeSeriesForGraphic = (someCountry) => {\n        var testresult = someCountry.timeseries.map((someTimeSerie) =>\n            ({\n                countryName: someCountry.name,\n                deaths: someTimeSerie.deaths,\n                recovered: someTimeSerie.recovered,\n                confirmed: someTimeSerie.confirmed,\n                date: someTimeSerie.date\n            }));\n\n        return testresult;\n    }\n    const getTimeSeriesForGraphic = (someCountries, someSelection) => {\n        var allTimeSeries = someCountries.flatMap((someCountry) => (mapTimeSeriesForGraphic(someCountry)));\n\n        // console.log(\"allTimeSeries\");\n        // console.log(allTimeSeries);\n        const groupedTimeSeries = lodash.groupBy(allTimeSeries, \"date\");\n        const keys = Object.keys(groupedTimeSeries);\n        const timeSeriesForGraphic = keys.map((someDate) => {\n            const seriesFromThatDate = groupedTimeSeries[someDate];\n            var jsonForGraphic = {};\n\n            jsonForGraphic[\"name\"] = someDate;\n            seriesFromThatDate.forEach((someSerie) => {\n\n                jsonForGraphic[someSerie[\"countryName\"]] = someSerie[params.selection];\n            });\n\n\n            return jsonForGraphic;\n        });\n\n        // console.log(\"timeSeriesForGraphic\");\n        // console.log(timeSeriesForGraphic);\n\n        return lodash.orderBy(timeSeriesForGraphic, \"name\");\n\n    };\n    const changeSelection = (someSelection) => { setOtherParams(Object.assign({}, params, { selection: someSelection })) }\n    const getUserLists = async () => {\n        const tokens = JSON.parse(localStorage.getItem('userInfo'));\n        const response = await fetch(`${process.env.REACT_APP_API_BASE_URL}lists`,\n            {\n                method: 'GET',\n                headers:\n                {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json',\n                    'Access-Control-Allow-Origin': `${process.env.REACT_APP_API_BASE_URL}`,\n                    'Authorization': tokens.access_token\n                }\n            });\n        const mock = [{\n            id: 10, name: \"Favoritos\", countries: [{\n                \"id\": 10,\n                \"name\": \"Argentina\",\n                \"flag\": \"https://image.shutterstock.com/image-vector/original-simple-argentina-flag-isolated-260nw-516324706.jpg\",\n                \"iso_2\": \"AR\",\n                \"iso_3\": \"ARG\",\n                \"latitude\": \"-34\",\n                \"longitude\": \"-64\",\n                \"created_at\": \"2020-05-25T23:49:27.000Z\",\n                \"updated_at\": \"2020-05-25T23:49:27.000Z\",\n                \"deleted_at\": null,\n                \"timeseries\": [\n                    {\n                        \"confirmed\": 50,\n                        \"deaths\": 50,\n                        \"recovered\": 2,\n                        \"date\": \"2020/02/23\"\n                    }, {\n                        \"confirmed\": 15,\n                        \"deaths\": 185,\n                        \"recovered\": 3,\n                        \"date\": \"2020/02/26\"\n                    },\n                    {\n                        \"confirmed\": 70,\n                        \"deaths\": 290,\n                        \"recovered\": 4,\n                        \"date\": \"2020/02/27\"\n                    }]\n            }, {\n                \"id\": 101,\n                \"name\": \"Paraguay\",\n                \"flag\": \"https://image.shutterstock.com/image-vector/original-simple-argentina-flag-isolated-260nw-516324706.jpg\",\n                \"iso_2\": \"AR\",\n                \"iso_3\": \"ARG\",\n                \"latitude\": \"-34\",\n                \"longitude\": \"-64\",\n                \"created_at\": \"2020-05-25T23:49:27.000Z\",\n                \"updated_at\": \"2020-05-25T23:49:27.000Z\",\n                \"deleted_at\": null,\n                \"timeseries\": [\n                    {\n                        \"confirmed\": 100,\n                        \"deaths\": 70,\n                        \"recovered\": 2,\n                        \"date\": \"2020/02/20\"\n                    }, {\n                        \"confirmed\": 500,\n                        \"deaths\": 200,\n                        \"recovered\": 3,\n                        \"date\": \"2020/02/21\"\n                    },\n                    {\n                        \"confirmed\": 70,\n                        \"deaths\": 500,\n                        \"recovered\": 4,\n                        \"date\": \"2020/02/23\"\n                    }]\n            },\n            {\n                \"id\": 204,\n                \"name\": \"Singapore\",\n                \"flag\": \"https://cdn.britannica.com/36/4036-004-745547DB/Flag-Singapore.jpg\",\n                \"iso_2\": \"SG\",\n                \"iso_3\": \"SGP\",\n                \"latitude\": \"13667\",\n                \"longitude\": \"103.8\",\n                \"created_at\": \"2020-05-25T23:49:27.000Z\",\n                \"updated_at\": \"2020-05-25T23:49:27.000Z\",\n                \"deleted_at\": null,\n                \"timeseries\": [\n                    {\n                        \"confirmed\": 10,\n                        \"deaths\": 1,\n                        \"recovered\": 2,\n                        \"date\": \"2020/02/24\"\n                    }, {\n                        \"confirmed\": 80,\n                        \"deaths\": 12,\n                        \"recovered\": 1,\n                        \"date\": \"2020/02/26\"\n                    },\n                    {\n                        \"confirmed\": 710,\n                        \"deaths\": 60,\n                        \"recovered\": 20,\n                        \"date\": \"2020/02/27\"\n                    }]\n            }]\n        }];\n        const result = await response.json();\n        const list = result.data.length > 0 ? result.data : mock;\n        return list.map(someList =>\n\n            ({ id: someList.id, name: someList.name, countries: [] }))\n\n    };\n    const populateLists = async (someListsList) => {\n        const tokens = JSON.parse(localStorage.getItem('userInfo'));\n        // console.log(\"someListList\");\n        // console.log(someListsList);\n        await someListsList.forEach(async (aList) => {\n\n            var result = await fetch(`${process.env.REACT_APP_API_BASE_URL}lists/${aList.id}/history`,\n\n                {\n                    method: 'GET',\n                    headers:\n                    {\n                        'Accept': 'application/json',\n                        'Content-Type': 'application/json',\n                        'Access-Control-Allow-Origin': `${process.env.REACT_APP_API_BASE_URL}`,\n                        'Authorization': tokens.access_token\n                    }\n                }).then(response => response.json());\n            console.log(result);\n            aList.countries = result;\n        }\n        );\n        // console.log(\"populate\")\n        // console.log(someListsList);\n\n    }\n    const queryOffset = async (someListId, offsetsquery) => {\n        console.log(someListId);\n        console.log(offsetsquery);\n        const tokens = JSON.parse(localStorage.getItem('userInfo'));\n\n        const countriesWithOffset = await fetch(`${process.env.REACT_APP_API_BASE_URL}lists/${someListId}/history?offsets=${offsetsquery}`,\n\n            {\n                method: 'GET',\n                headers:\n                {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json',\n                    'Access-Control-Allow-Origin': `${process.env.REACT_APP_API_BASE_URL}`,\n                    'Authorization': tokens.access_token\n                }\n            }).then(response => response.json());\n        console.log(countriesWithOffset);\n        console.log(\"countriesWithOffset\");\n        return countriesWithOffset;\n        // setOtherParams(Object.assign({}, params, { selectedObjectsSecond: {} }))\n    }\n    const handleOffsetChange = async (event, countryId) => {\n        const countriesInSelect = params.selectedObjectsSecond;\n        const value = !event.target.value ? 0 : event.target.value;\n        const countryMapped = countriesInSelect.map((someCountry) => {\n            if (someCountry.id == countryId) someCountry.offset = value;\n            return someCountry;\n        });\n        const countriesWithOffset1 = await queryOffset(params.listSelect.find((x) => (params.selectedItemsFirst.includes(x.name))).id, \"[\" + countryMapped.map((c) => (`{\"country_id\":${c.id},\"offset\": ${c.offset}}`)).join(',') + \"]\");\n        countryMapped.map((someCountry) => { someCountry.timeseries = countriesWithOffset1.find((x) => (x.id == someCountry.id)).timeseries; return someCountry })\n\n\n        setOtherParams(Object.assign({}, params, { selectedObjectsSecond: countryMapped }));\n\n\n    };\n    useEffect(() => {\n        async function FetchData() {\n            const result = await getUserLists();\n\n            populateLists(result);\n            setOtherParams(Object.assign({}, params, { listSelect: result }));\n        }\n        if (params.listSelect.length == 0) FetchData();\n    }, []);\n\n\n    return (\n        <div className=\"container layout-dashboard\">\n\n\n            <div style={{ display: \"flex\", flexFlow: \"row\", marginTop: 30 }}  >\n\n                <FormControl className={classes.formControl} style={{ maxWidth: '250px', minWidth: 120, marginInlineEnd: 50 }}>\n\n                    <InputLabel id=\"demo-simple-select-label\">{\"Listas\"}</InputLabel>\n                    <Select\n                        labelId=\"demo-mutiple-chip-label\"\n                        id=\"demo-mutiple-chip\"\n\n                        value={params.selectedItemsFirst}\n                        onChange={handleChangeFirst}\n                        input={<Input />}\n\n                        MenuProps={MenuProps}\n                    >\n                        {params.listSelect.map((someList) => (\n                            <MenuItem key={someList.id} value={someList.name} style={getStyles(someList.name, params.selectedItemsFirst, theme)}>\n                                {someList.name}\n                            </MenuItem>\n                        ))}\n                    </Select>\n                </FormControl>\n\n                {!params.isCountryListDisabled ? <FormControl className={classes.formControl} style={{ maxWidth: '200px', minWidth: 120, marginInlineEnd: 50 }}>\n\n                    <InputLabel id=\"demo-simple-select-label2\">{\"Paises\"}</InputLabel>\n                    <Select\n                        labelId=\"demo-mutiple-chip-label2\"\n                        id=\"demo-mutiple-chip2\"\n                        multiple\n                        value={params.selectedItemsSecond}\n                        onChange={handleChangeSecond}\n                        input={<Input />}\n\n                        MenuProps={MenuProps}\n                    >\n                        {params.countriesList.map((someCountry) => (\n                            <MenuItem key={someCountry.name} value={someCountry.id} style={getStyles(someCountry.name, params.selectedItemsSecond, theme)}>\n                                {someCountry.name}\n                            </MenuItem>\n                        ))}\n                    </Select>\n                </FormControl> : null}\n\n            </div>\n            <div style={{ display: \"flex\", flexFlow: \"row\", marginTop: 30 }}>\n                {params.selectedObjectsSecond.length == 0 ? null :\n                    <div style={{ flexGrow: 1 }}>\n                        <Grid container spacing={6} alignItems=\"stretch\">\n                            <Grid item xs>\n\n                                <div className={classes.demo}>\n                                    <List >\n                                        {/* {params.selectedItemsSecond.map((x) => (<input type={\"number\"} name={x} />))} */}\n                                        {params.selectedItemsSecond.map((x) => (<ListItem>\n                                            <ListItemText\n                                                primary={params.selectedObjectsSecond.find((y) => (y.id == x)).name}\n                                            />\n                                            <input onKeyUp={(e) => (handleOffsetChange(e, x))} type={\"number\"} name={x.id} defaultValue={params.selectedObjectsSecond.find((y) => (y.id == x)).offset} />\n                                        </ListItem>))\n                                        }\n                                    </List>\n\n                                </div>\n                            </Grid></Grid>\n                    </div>\n                }\n                <div>\n                    {params.selectedObjectsSecond.length == 0 ? null :\n                        <div style={{ display: \"flex\", flexFlow: \"column\" }} >\n                            <div style={{ display: \"flex\", flexFlow: \"row\", marginBottom: 30 }}>\n                                <Button onClick={() => changeSelection(\"deaths\")} id=\"deathsButton\" variant=\"outlined\" color=\"primary\" style={{ marginLeft: 60 }}>Muertes</Button>\n                                <Button onClick={() => changeSelection(\"confirmed\")} id=\"confirmedButton\" variant=\"outlined\" color=\"primary\" style={{ marginLeft: 30 }}>Confirmados </Button>\n                                <Button onClick={() => changeSelection(\"recovered\")} id=\"recoveredButton\" variant=\"outlined\" color=\"primary\" style={{ marginLeft: 30 }}>Recuperados </Button>\n                            </div>\n                            <div style={{ display: \"flex\", flexFlow: \"row\" }}>\n                                <LineChart\n                                    width={600}\n                                    height={300}\n                                    data={params.selectedObjectsSecond === [] ? [] : getTimeSeriesForGraphic(params.selectedObjectsSecond)}\n                                    margin={{\n                                        top: 5, right: 30, left: 20, bottom: 5,\n                                    }}\n                                >\n                                    <CartesianGrid strokeDasharray=\"3 3\" />\n                                    <XAxis dataKey=\"name\" />\n                                    <YAxis />\n                                    <Tooltip />\n                                    <Legend />\n                                    {params.countriesList.map((someCountry) => (<Line type=\"monotone\" connectNulls={true} dataKey={someCountry.name} stroke={someCountry.color} activeDot={{ r: 8 }} />))}\n\n\n                                </LineChart>\n                            </div>\n                        </div>}\n\n                </div>\n\n\n            </div>\n\n\n        </div >\n    );\n\n}\nexport default ComparisonComponent;","import React, { useState } from 'react'\nimport axios from 'axios';\n\nconst getAccessToken = () => {\n    const tokens = JSON.parse(localStorage.getItem('userInfo'));\n    return tokens.access_token;\n}\n\n\nconst CountriesComponent = (props) => {\n\n    // const getCountriesList = async () => {\n    //     const response = await axios.get(\n    //         \"http://localhost:8080/countries/\",\n    //         {\n    //             headers: {\n    //                 'Accept': 'application/json',\n    //                 'Content-Type': 'application/json',\n    //                 'Access-Control-Allow-Origin': 'https://localhost:8080',\n    //                 'Authorization': getAccessToken(),\n    //             }\n    //         });\n    //     return response.data;\n    // };\n\n    // const listOfCountries = getCountriesList();\n    // console.log(listOfCountries);\n\n    // return (\n    //     <div>\n    //         <h1>Resultado</h1>\n    //         <h1>Resultado</h1>\n    //         <h1>Resultado</h1>\n    //         <h1>Resultado</h1>\n    //         <h1>Resultado</h1>\n    //         <h1>Resultado</h1>\n    //         <h1>{listOfCountries.length}</h1>\n    //         {/* {listOfCountries.map(c => {\n    //             return (<h6>{c.name}</h6>)\n    //         }\n    //         )} */}\n    //     </div>\n    // );\n    return (\n        <div>\n\n        </div>\n    )\n}\n\nexport default CountriesComponent;","import React, { useState, useEffect } from \"react\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport { ValidatorForm } from \"react-form-validator-core\";\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport axios from 'axios';\nimport { getUserAccessToken } from '../session-managment/utils';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\n\nconst useStyles = makeStyles((theme) => ({\n  addCountry: {\n    marginTop: '15px',\n  },\n  content: {\n    display: 'flex',\n    flexDirection: 'column',\n  padding: '25px',\n},\ntitle: {\n  alignSelf: 'flex-start',\n},\neditButton: {\n  alignSelf: 'flex-start',\n  marginBottom: '20px',\n}\n}));\n\nconst AddCountryDialog = (props) => {\n  const classes = useStyles();\n\n  const [params, setParams] = useState({\n    openCountryDialog: props.openCountryDialog,\n    newCountry: props.addCountry,\n    showError: false,\n  });\n\n  const [selectedCountry, selectCountry] = React.useState({});\n  const [countries, setCountries] = useState([]);\n  const addNewCountry = () => {\n    console.log(selectedCountry);\n    if (  !selectedCountry || Object.keys(selectedCountry).length === 0){\n      setParams(Object.assign({}, params, { showError: true }));\n      return\n    }\n    props.addCountry(selectedCountry);\n    props.closeCountryModal();\n  }\n\n  useEffect(() => {\n    const axiosInstance = axios.create({\n      baseURL: process.env.REACT_APP_API_BASE_URL,\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': getUserAccessToken(),\n      }\n    });\n\n\n    const fetchData = async () => {\n      const response = await axiosInstance.get('/countries?page=1&limit=253');\n      const listOfCountries = response.data.data;\n      setCountries(listOfCountries);\n    }\n    fetchData();\n  }, [])\n\n  return (\n    <Dialog id=\"new-country-dialog\" open={props.openCountryDialog} onClose={props.closeCountryModal} aria-labelledby=\"form-dialog-title\">\n      <Paper className={classes.addCountry}>\n        <div>\n          <DialogTitle>Agregar país</DialogTitle>\n          <DialogContent>\n            <Autocomplete\n              id=\"country-select\"\n              value={selectedCountry}\n              style={{ width: 300 }}\n              options={countries}\n              classes={{\n                option: classes.option,\n              }}\n              onChange={(event, country) => {\n                selectCountry(country);\n                setParams(Object.assign({}, params, { showError: false }));\n              }}\n              autoHighlight\n              getOptionLabel={(option) => option.name}\n              renderInput={(params) => (\n                <TextField\n                  {...params}\n                  label=\"Choose a country\"\n                  variant=\"outlined\"\n                  autoComplete='new-password'\n                />\n              )}\n            />\n          {params.showError ? <div>Seleccione un país de la lista</div> : null}\n          </DialogContent>\n\n        </div>\n        <DialogActions>\n          <label onClick={props.closeCountryModal} className=\"btn\">Cancelar</label>\n          <button onClick={addNewCountry} className=\"btn btn-primary\">Agregar</button>\n        </DialogActions>\n      </Paper>\n    </Dialog>\n  )\n\n\n\n}\n\nexport default AddCountryDialog;\n","import React, { useState, useEffect } from \"react\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport Paper from '@material-ui/core/Paper';\nimport Button from '@material-ui/core/Button';\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\nimport FlagIcon from '@material-ui/icons/Flag';\nimport { faPlus } from '@fortawesome/free-solid-svg-icons'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport axios from 'axios';\nimport { getUserAccessToken } from '../session-managment/utils';\nimport AddCountryDialog from '../lists/addCountry';\nimport { useFormik } from 'formik';\n\nconst useStyles = makeStyles((theme) => ({\n  addCountry: {\n    marginTop: '15px',\n  },\n  content: {\n    display: 'flex',\n    flexDirection: 'column',\n    padding: '25px',\n  },\n  title: {\n    alignSelf: 'flex-start',\n    fontSize: 'xx-large',\n  },\n  editButton: {\n    marginTop: '13px',\n    alignSelf: 'flex-start',\n    marginBottom: '20px',\n  },\n  editTitle: {\n    backgroundColor: 'white',\n    borderRadius: '5px',\n    fontSize: 'xx-large',\n  }\n}));\n\nconst ListItemComponent = (props) => {\n  const classes = useStyles();\n  const [params, setParams] = useState({\n    editMode: false,\n    listName: props.listName,\n    listId: props.listId,\n    listItems: [],\n    openDialog: false,\n  });\n\n  const changeMode = () => {\n    setParams(Object.assign({}, params, { editMode: !params.editMode }));\n  }\n  \n  const uploadList = async (values) => {\n    await axiosInstance.put('/lists/' + params.listId,\n      JSON.stringify(\n        {\n          'name': values.listName,\n          'countries': params.listItems.map((country) => (country.id)),\n        }\n      ));\n    setParams(Object.assign({}, params, { listName: values.listName, editMode: !params.editMode }));\n  }\n\n  const handleSubmit = (country) => {\n    let countryList = params.listItems;\n    countryList.push(country);\n    setParams(Object.assign({}, params, { listItems: countryList }));\n    closeModal();\n  }\n  \n  const removeItem = (id) => {\n    let countryList = params.listItems;\n    countryList.splice( countryList.findIndex(c => c.id === id) , 1);\n    setParams(Object.assign({}, params, { listItems: countryList }));\n  }\n  \n  const closeModal = () => {\n    setParams(Object.assign({}, params, { newCountry: undefined }));\n    setParams(Object.assign({}, params, { openDialog: false }));\n  }\n  \n  const openModal = () => {\n    setParams(Object.assign({}, params, { openDialog: true }));\n  }\n  \n  const [countries, setCountries] = useState([]);\n  \n    const axiosInstance = axios.create({\n      baseURL: process.env.REACT_APP_API_BASE_URL,\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': getUserAccessToken(),\n      }\n    });\n\n  useEffect(() => {\n\n    const fetchData = async () => {\n      const response = await axiosInstance.get('/countries?page=1&limit=253');\n      const listOfCountries = response.data.data;\n      setCountries(listOfCountries);\n    }\n    \n    const getListInfo = async () => {\n      const listId = props.location.pathname.split(\"/\").slice(-1)[0];\n      const response = await axiosInstance.get('/lists/' + listId);\n      const listInfo = response.data;\n      const response2 = await axiosInstance.get('/lists/' + listId + '/countries');\n      const listItems = response2.data.data;\n      setParams(Object.assign({}, params, { listId : listId, listName: listInfo.name, listItems: listItems }));\n    }\n    fetchData();\n    getListInfo();\n  }, [])\n  \n  const validate = values => {\n    const errors = {};\n    if (!values.listName) {\n      errors.listName = 'Required';\n    } \n    if (params.listItems.length == 0){\n      errors.listItems = \"Debe seleccionar al menos un país\"\n    }\n    console.log(errors);\n    return errors;\n  };\n  \n  const formik = useFormik({\n    initialValues: {\n      listName: params.listName,\n    },\n    validate,\n    enableReinitialize: true,\n    onSubmit: values => {\n      uploadList(values);\n    },\n    validateOnChange: false,\n    validateOnBlur: false\n  });\n\n  return (\n    <div className=\"container layout-dashboard\" style={{backgroundColor: \"#1C8EF9\"}}>\n      <div className={classes.content}>\n        <form onSubmit={formik.handleSubmit}>\n\n          {formik.errors.firstName ? <div>El campo nombre es requerido</div> : null}\n\n          {!params.editMode\n            ? <h1 className={classes.title}>{params.listName}</h1>\n            : <input\n            id=\"listName\"\n            name=\"listName\"\n            type=\"text\"\n            className={classes.editTitle}\n            onBlur={formik.handleBlur}\n            onChange={formik.handleChange}\n            value={formik.values.listName}\n          />\n          }\n\n          <div style={{textAlign: \"left\"}}>\n            {!params.editMode? (\n              <div>\n                <Button onClick={() => changeMode()}\n                  className={classes.editButton} variant=\"contained\">\n                  Editar\n                </Button>\n              </div>\n            ): (\n              <Button \n                className={classes.editButton} type=\"submit\" variant=\"contained\">\n                Guardar\n              </Button>\n            )}\n          </div>\n          {formik.errors.listItems ? <div>Seleccione por lo menos un país</div> : null}\n        </form>\n        <Paper>\n          <List>\n            {params.listItems.map((row) =>(\n              <ListItem>\n                <ListItemIcon>\n                  <FlagIcon />\n                </ListItemIcon>\n                <ListItemText\n                  primary={row.name}\n                />\n                { params.editMode ? \n                  <HighlightOffIcon onClick={() => removeItem(row.id)} /> \n                : null }\n              </ListItem>\n            ))}\n\n            { params.editMode ? \n              <ListItem\n                onClick={openModal}\n              >\n                <ListItemIcon>\n                  <FontAwesomeIcon icon={faPlus} />\n                </ListItemIcon>\n                <ListItemText\n                  primary=\"Agregar país...\"\n\n                />\n              </ListItem>\n              : null}\n          </List>\n        </Paper>\n      </div>\n\n      <AddCountryDialog openCountryDialog={params.openDialog} addCountry={handleSubmit} closeCountryModal={closeModal}/>\n    </div>\n  );\n}\n\nexport default ListItemComponent;\n","import React, { useState, useEffect } from 'react'\nimport { Link } from \"react-router-dom\";\nimport Paper from '@material-ui/core/Paper';\nimport { makeStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport Dialog from '@material-ui/core/Dialog';\nimport { ValidatorForm } from \"react-form-validator-core\";\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport ValidatableField from \"../validation/validatable-field\";\nimport { faPlus } from '@fortawesome/free-solid-svg-icons'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport axios from 'axios';\nimport { getUserAccessToken } from '../session-managment/utils';\nimport FlagIcon from '@material-ui/icons/Flag';\nimport AddCountryDialog from '../lists/addCountry';\nimport { useFormik } from 'formik';\n\nconst useStyles = makeStyles((theme) => ({\n  wrapper: {\n    width: '100%',\n    maxWidth: '650px',\n    paddingTop: '100px',\n    margin: 'auto',\n  },\n  paper: {\n    marginTop: theme.spacing(3),\n    marginBottom: theme.spacing(3),\n    padding: theme.spacing(2),\n    [theme.breakpoints.up(600 + theme.spacing(3) * 2)]: {\n      marginTop: theme.spacing(6),\n      marginBottom: theme.spacing(6),\n      padding: theme.spacing(3),\n    },\n  },\n  listItem: {\n    fontSize: 'x-large'\n  }\n}));\n\nconst rows = [\n  createData(0, 'Países Occidente'),\n  createData(1, 'Países Oriente'),\n  createData(2, 'Norteamérica'),\n];\n\nfunction createData(id, name) {\n  return { id, name };\n}\n\nconst ListsComponent = (props) => {\n  const classes = useStyles();\n  \n  const [params, setParams] = useState({\n    editMode: false,\n    listItems: [],\n    newListCountries: [],\n    openDialog: false,\n    openCountryDialog: false,\n    selectedCountry: undefined,\n  });\n  \n  const handleInputChange = (event) => {\n    setParams(Object.assign({}, params, { newCountry: event.target.value }));\n  }\n\n  const handleSubmit = (values) => {\n    const listName = values.listName;\n    let response = postList(listName);\n    setParams(Object.assign({}, params, { newListCountries: [] }));\n    closeModal();\n    window.location.reload(false);\n  }\n  \n  const closeModal = () => {\n    setParams(Object.assign({}, params, { newCountry: undefined }));\n    setParams(Object.assign({}, params, { openDialog: false }));\n  }\n  \n  const openModal = () => {\n    setParams(Object.assign({}, params, { openDialog: true }));\n  }\n\n  const axiosInstance = axios.create({\n    baseURL: process.env.REACT_APP_API_BASE_URL,\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': getUserAccessToken(),\n    }\n  });\n\n  const postList = async (listName) => {\n    try {\n    const response = await axiosInstance.post('/lists',\n      JSON.stringify(\n        {\n          'name': listName,\n          'countries': params.newListCountries.map((country) => (country.id)),\n        }\n      ));\n    return response;\n    } catch (error){\n      if (error.response)\n        alert(error.response.data.message);\n      else \n        alert(\"Error desconocido\")\n    }\n\n  }\n  \n  const getUserLists = async () => {\n    try {\n      const response = await axiosInstance.get('/lists');\n      const listOfLists = response.data.data;\n      setParams(Object.assign({}, params, { listItems: listOfLists }));\n    } catch (error){\n      if (error.response)\n        alert(error.response.data.message);\n      else \n        alert(\"Error desconocido\")\n    }\n  }\n\n  useEffect(() => {\n\n    getUserLists();\n  }, [])\n  \n  const validate = values => {\n    const errors = {};\n    if (!values.listName) {\n      errors.listName = 'Required';\n    } \n    if (params.newListCountries.length == 0){\n      errors.listItems = \"Debe seleccionar al menos un país\"\n    }\n\n    return errors;\n  };\n\n  const formik = useFormik({\n    initialValues: {\n      listName: '',\n    },\n    validate,\n    onSubmit: values => {\n      handleSubmit(values);\n    },\n    validateOnChange: false,\n    validateOnBlur: false\n  });\n\n  const addCountry = (country) => {\n    let countryList = params.newListCountries;\n    countryList.push(country);\n    setParams(Object.assign({}, params, { newListCountries: countryList }));\n  }\n\n  const openCountryModal = () => {\n    setParams(Object.assign({}, params, { openCountryDialog: true }));\n  }\n  \n  const closeCountryModal = () => {\n    setParams(Object.assign({}, params, { openCountryDialog: false }));\n  }\n\n  return (\n    <div className=\"container layout-dashboard\" style={{backgroundColor: \"#1C8EF9\"}}>\n      <Paper className={classes.paper}>\n        <h1>\n          Mis Listas\n        </h1>\n        <List>\n          {params.listItems.map((row) => (\n            <ListItem button component={Link} to={\"/list/\" + row.id}>\n              <ListItemText classes={{primary:classes.listItem}}\n                primary={row.name}\n              />\n              <ListItemIcon>\n                <ChevronRightIcon />\n              </ListItemIcon>\n            </ListItem>\n          ))}\n              <ListItem\n                onClick={openModal}\n              >\n                <ListItemIcon>\n                  <FontAwesomeIcon icon={faPlus} />\n                </ListItemIcon>\n                <ListItemText classes={{primary:classes.listItem}}\n                  primary=\"Crear nueva lista...\"\n\n                />\n              </ListItem>\n        </List>\n      </Paper>\n\n      <Dialog open={params.openDialog} onClose={closeModal} aria-labelledby=\"form-dialog-title\">\n        <Paper className={classes.addCountry}>\n\n\n          <div>\n            <DialogTitle id=\"new-list-dialog\">Agregar nueva lista...</DialogTitle>\n            <DialogContent>\n              <form onSubmit={formik.handleSubmit}>\n                <input\n                  id=\"listName\"\n                  name=\"listName\"\n                  type=\"text\"\n                  onBlur={formik.handleBlur}\n                  onChange={formik.handleChange}\n                  value={formik.values.listName}\n                />\n                {formik.errors.listName ? <div>El campo nombre es requerido</div> : null}\n\n                <List>\n                  {params.newListCountries.map((row) =>(\n                    <ListItem>\n                      <ListItemIcon>\n                        <FlagIcon />\n                      </ListItemIcon>\n                      <ListItemText\n                        primary={row.name}\n                      />\n                    </ListItem>\n                  ))}\n                </List>\n                <label onClick={openCountryModal} className=\"btn btn-primary\">Agregar país...</label>\n                {formik.errors.listItems ? <div>Debe seleccionar al menos un país</div> : null}\n                <AddCountryDialog openCountryDialog={params.openCountryDialog} addCountry={addCountry} closeCountryModal={closeCountryModal}/>\n\n                <DialogActions>\n                  <label onClick={closeModal} className=\"btn\">Cancelar</label>\n                  <button type=\"submit\" className=\"btn btn-primary\">Crear</button>\n                </DialogActions>\n\n              </form>\n            </DialogContent>\n          </div>\n\n        </Paper>\n      </Dialog>\n\n\n    </div>\n\n  );\n}\nexport default ListsComponent;\n","import React from 'react'\nimport SignUpComponent from '../sign-up/sign-up';\nimport { Redirect } from \"react-router-dom\";\n\nconst NotFoundPage = () => {\n    return (\n        <div>\n            <div className=\"auth-wrapper\">\n                <div className=\"auth-inner\">\n                    <h1>Oops! </h1>\n                    <h2>404: Not Found</h2>\n                    <p>Sorry, an error has ocurred. Requested page not found!</p>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default NotFoundPage;","import React from \"react\"\nimport { Route, Redirect } from \"react-router-dom\"\nimport { isUserLogin } from \"./utils\";\n\nconst PrivateRoute = ({ component: Component, ...rest }) => {\n    return (\n        <Route {...rest} render={(props) => (\n            isUserLogin() ?\n                <Component {...props} />\n                : <Redirect to=\"/sign-in\" />\n        )} />\n    )\n};\n\nexport default PrivateRoute;\n","\nimport React, { useState } from \"react\";\nconst MenuItemComponent = (props) => {\n    const [params, setparams] = useState({\n        anIcon: props.anIcon,\n        urlRef: props.urlRef,\n        anId: props.anId,\n        aTitle: props.aTitle,\n        acolor: \"#b8b7ad\"\n    })\n    const changeTextColorIn = () => setparams(Object.assign({}, params, { acolor: \"#007bff\" }));\n    const changeTextColorOut = () => setparams(Object.assign({}, params, { acolor: \"#b8b7ad\" }));\n    return (\n        <a onMouseEnter={changeTextColorIn} onMouseLeave={changeTextColorOut} className=\"bm-item\" id={params.anId} href={params.urlRef} tabIndex=\"0\" style={{ color: params.acolor, display: \"block\" }}>{params.anIcon} <span >{params.aTitle} </span></a>\n    );\n};\n\nexport default MenuItemComponent;","import React from 'react'\nimport { slide as Menu } from 'react-burger-menu';\n\nimport MenuItemComponent from '../dashboards/menu-item'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faChartBar, faUser, faGlobeAmericas, faList } from '@fortawesome/free-solid-svg-icons'\n\nvar styles = {\n    bmBurgerButton: {\n        position: 'fixed',\n        width: '36px',\n        height: '30px',\n        left: '36px',\n        top: '15px'\n    },\n    bmBurgerBars: {\n        background: '#373a47'\n    },\n    bmBurgerBarsHover: {\n        background: '#007bff'\n    },\n    bmCrossButton: {\n        height: '24px',\n        width: '24px'\n    },\n    bmCross: {\n        background: '#bdc3c7'\n    },\n    bmMenuWrap: {\n        position: 'fixed',\n        height: '100%',\n        width: '10%'\n    },\n    bmMenu: {\n        background: '#373a47',\n        padding: '2.5em 1.5em 0',\n        fontSize: '1.15em'\n    },\n    bmMorphShape: {\n        fill: '#373a47'\n    },\n    bmItemList: {\n        color: '#b8b7ad',\n        padding: '0.8em'\n    },\n    bmItem: {\n        display: 'inline-block'\n    },\n    bmOverlay: {\n        background: 'rgba(0, 0, 0, 0.3)'\n    }\n}\nconst SideMenuUserComponent = () => {\n\n    const userIcon = <FontAwesomeIcon icon={faUser} />\n    const chartIcon = <FontAwesomeIcon icon={faChartBar} />\n    const countryIcon = <FontAwesomeIcon icon={faGlobeAmericas} />\n    const listIcon = <FontAwesomeIcon icon={faList} />\n\n    return (\n        <Menu outerContainerId={\"root\"} pageWrapId={\"navCovid\"} style={styles} >\n            {/* <MenuItemComponent anId=\"Users\" anIcon={userIcon} urlRef=\"/users\" aTitle=\"USUARIOS\" /> */}\n            <MenuItemComponent anId=\"Listas\" anIcon={listIcon} urlRef=\"/lists\" aTitle=\"LISTAS\" />\n            <MenuItemComponent anId=\"Paises\" anIcon={countryIcon} urlRef=\"/countries\" aTitle=\"PAISES\" />\n            <MenuItemComponent anId=\"Graphics\" anIcon={chartIcon} urlRef=\"/graphics\" aTitle=\"GRAFICOS\" />\n        </Menu>\n    )\n}\n\nexport default SideMenuUserComponent;\n","import React from 'react'\r\nimport { elastic as Menu } from 'react-burger-menu';\r\nimport MenuItemComponent from '../dashboards/menu-item'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faUser, faGlobeAmericas, faList } from '@fortawesome/free-solid-svg-icons'\r\n\r\nconst SideMenuAdminComponent = () => {\r\n\r\n    const userIcon = <FontAwesomeIcon icon={faUser} />\r\n    const countryIcon = <FontAwesomeIcon icon={faGlobeAmericas} />\r\n    const listIcon = <FontAwesomeIcon icon={faList} />\r\n\r\n    return (\r\n        <Menu outerContainerId={\"root\"} pageWrapId={\"navCovid\"}  >\r\n            <MenuItemComponent anId=\"Users\" anIcon={userIcon} urlRef=\"/admin/users\" aTitle=\"USERS INFO\" />\r\n            <MenuItemComponent anId=\"Compare\" anIcon={userIcon} urlRef=\"/admin/compare\" aTitle=\"LISTS COMPARE\" />\r\n            <MenuItemComponent anId=\"Countries\" anIcon={countryIcon} urlRef=\"/admin/countries\" aTitle=\"COUNTRIES INFO\" />\r\n            <MenuItemComponent anId=\"Lists\" anIcon={listIcon} urlRef=\"/admin/lists\" aTitle=\"REGISTERED LISTS\" />\r\n        </Menu>\r\n    )\r\n}\r\n\r\nexport default SideMenuAdminComponent;","import React from 'react'\r\nimport SideMenuUserComponent from \"../users/side-menu-user\"\r\nimport SideMenuAdminComponent from \"../admin/side-menu-admin\"\r\nimport { regularUser, adminUser } from '../session-managment/utils';\r\n\r\nconst SideMenuComponent = (props) => {\r\n    if (props.userType == regularUser) {\r\n        return <SideMenuUserComponent />\r\n    }\r\n    else if (props.userType == adminUser) {\r\n        return <SideMenuAdminComponent />\r\n    }\r\n    else return null;\r\n}\r\n\r\nexport default SideMenuComponent;\r\n","import React, { useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    container: {\r\n        maxHeight: 440,\r\n    },\r\n});\r\n\r\nconst columns = [\r\n    { id: 'listName', label: 'List name' },\r\n    { id: 'numberOfCountries', label: 'Number of countries', align: 'center' },\r\n    { id: 'createdAt', label: 'Created at', minWidth: '230px' },\r\n];\r\n\r\nfunction createData(listName, numberOfCountries, createdAt) {\r\n    return { listName, numberOfCountries, createdAt };\r\n}\r\n\r\nconst prepareToShow = (listOfObjectList) => listOfObjectList.map(objectList => {\r\n    return createData(\r\n        objectList.name,\r\n        objectList.countries_amount,\r\n        objectList.created_at,\r\n    )\r\n});\r\n\r\nconst ListsCountriesTable = (props) => {\r\n    const classes = useStyles();\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(10);\r\n    // const [rows, setRows] = useState([]);\r\n    const rows = prepareToShow(props.lists);\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(+event.target.value);\r\n        setPage(0);\r\n    };\r\n\r\n    return (\r\n        <Paper className={classes.root}>\r\n            <TableContainer className={classes.container}>\r\n                <Table stickyHeader aria-label=\"sticky table\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            {columns.map((column) => (\r\n                                <TableCell\r\n                                    key={column.id}\r\n                                    align={column.align}\r\n                                    style={{ minWidth: column.minWidth, fontWeight: 'bold' }}\r\n                                >\r\n                                    {column.label}\r\n                                </TableCell>\r\n                            ))}\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row) => {\r\n                            return (\r\n                                <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.code}>\r\n                                    {columns.map((column) => {\r\n                                        const value = row[column.id];\r\n                                        return (\r\n                                            <TableCell key={column.id} align={column.align}>\r\n                                                {value}\r\n                                            </TableCell>\r\n                                        );\r\n                                    })}\r\n                                </TableRow>\r\n                            );\r\n                        })}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n            <TablePagination\r\n                rowsPerPageOptions={[10, 25, 50, 100]}\r\n                component=\"div\"\r\n                count={rows.length}\r\n                rowsPerPage={rowsPerPage}\r\n                page={page}\r\n                onChangePage={handleChangePage}\r\n                onChangeRowsPerPage={handleChangeRowsPerPage}\r\n            />\r\n        </Paper>\r\n    );\r\n}\r\n\r\nexport default ListsCountriesTable;","import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport { getUserAccessToken } from '../../session-managment/utils'\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport ListsCountriesTable from './ListsCountriesTable';\r\n\r\nconst CheckUserInfoButton = (props) => {\r\n\r\n    const [open, setOpen] = useState(false);\r\n    const [userInfo, setUserInfo] = useState([]);\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const handleClickOpen = () => {\r\n        const axiosInstance = axios.create({\r\n            baseURL: process.env.REACT_APP_API_BASE_URL,\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': getUserAccessToken(),\r\n            }\r\n        });\r\n\r\n        const fetchData = async () => {\r\n            const result = await axiosInstance.get(`/users/${props.userId}`);\r\n            setUserInfo(result.data.lists);\r\n        }\r\n        fetchData();\r\n        setOpen(true);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Button variant=\"outlined\" color=\"primary\" onClick={handleClickOpen}>\r\n                Check\r\n            </Button>\r\n            <Dialog\r\n                open={open}\r\n                onClose={handleClose}\r\n                aria-labelledby=\"alert-dialog-title\"\r\n                aria-describedby=\"alert-dialog-description\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-title\">{`User: ${props.userEmail}`}</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText id=\"alert-dialog-description\">\r\n                        <ListsCountriesTable lists={userInfo} />\r\n                        Total registered lists: {userInfo.length}\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleClose} color=\"primary\">\r\n                        Close\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CheckUserInfoButton;\r\n\r\n","import React, { useState, useEffect } from 'react'\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport axios from 'axios';\r\nimport { getUserAccessToken } from '../../session-managment/utils';\r\nimport CheckUserInfoButton from './CheckUserInfoButton';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    container: {\r\n        maxHeight: 440,\r\n    },\r\n});\r\n\r\nconst columns = [\r\n    { id: 'id', label: '#' },\r\n    { id: 'user', label: 'User' },\r\n    { id: 'lastAccess', label: 'Last access', minWidth: '230px' },\r\n    {\r\n        id: 'checkInfoUserButton',\r\n        label: 'Check user lists',\r\n        align: 'center'\r\n    }\r\n];\r\n\r\nconst createData = (id, user, lastAccess, checkInfoUserButton) => {\r\n    return { id, user, lastAccess, checkInfoUserButton };\r\n};\r\n\r\nconst prepareToShow = (users) => users.map(user => {\r\n    return createData(\r\n        user.id,\r\n        user.email,\r\n        user.last_access,\r\n        <CheckUserInfoButton userId={user.id} userEmail={user.email} />\r\n    )\r\n});\r\n\r\nconst UsersInfo = () => {\r\n    const classes = useStyles();\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(10);\r\n    const [rows, setRows] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const axiosInstance = axios.create({\r\n            baseURL: process.env.REACT_APP_API_BASE_URL,\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': getUserAccessToken(),\r\n            }\r\n        });\r\n\r\n        const fetchUsers = async () => {\r\n            const response = await axiosInstance.get('/users?page=1&limit=100&order_column=id&order_type=ASC');\r\n            const listOfUsers = response.data.data;\r\n            const usersRows = prepareToShow(listOfUsers);\r\n            setRows(usersRows);\r\n        }\r\n\r\n        fetchUsers();\r\n    }, []);\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(+event.target.value);\r\n        setPage(0);\r\n    };\r\n\r\n    return (\r\n        <div className=\"auth-wrapper-table\">\r\n            <div className=\"auth-inner-table\">\r\n                <Paper className={classes.root}>\r\n                    <TableContainer className={classes.container}>\r\n                        <Table stickyHeader aria-label=\"sticky table\">\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    {columns.map((column) => (\r\n                                        <TableCell\r\n                                            key={column.id}\r\n                                            align={column.align}\r\n                                            style={{ minWidth: column.minWidth, fontWeight: 'bold' }}\r\n                                        >\r\n                                            {column.label}\r\n                                        </TableCell>\r\n                                    ))}\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row) => {\r\n                                    return (\r\n                                        <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.code}>\r\n                                            {columns.map((column) => {\r\n                                                const value = row[column.id];\r\n                                                return (\r\n                                                    <TableCell key={column.id} align={column.align}>\r\n                                                        {value}\r\n                                                    </TableCell>\r\n                                                );\r\n                                            })}\r\n                                        </TableRow>\r\n                                    );\r\n                                })}\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                    <TablePagination\r\n                        rowsPerPageOptions={[10, 25, 50, 100]}\r\n                        component=\"div\"\r\n                        count={rows.length}\r\n                        rowsPerPage={rowsPerPage}\r\n                        page={page}\r\n                        onChangePage={handleChangePage}\r\n                        onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                    />\r\n                </Paper>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UsersInfo;\r\n","import React, { useState } from 'react'\r\nimport axios from 'axios';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport { differenceInDays, subDays } from 'date-fns';\r\nimport { getUserAccessToken } from '../../session-managment/utils';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 200,\r\n    },\r\n}));\r\n\r\nconst DropMenuOfRegisteredLists = () => {\r\n    const classes = useStyles();\r\n    const [selectedDate, setSelectedDate] = useState(new Date());\r\n    const [open, setOpen] = useState(false);\r\n    const [amount, setAmount] = useState(99);\r\n    const [openWindowDialog, setOpenWindowDialog] = useState(false);\r\n    const originOfTime = new Date(2020, 0, 1);\r\n\r\n    const handleChange = async (event) => {\r\n        setSelectedDate(event.target.value);\r\n        const days = differenceInDays(new Date(), selectedDate);\r\n        const axiosInstance = axios.create({\r\n            baseURL: process.env.REACT_APP_API_BASE_URL,\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': getUserAccessToken(),\r\n            }\r\n        });\r\n\r\n        const fetchData = async () => {\r\n            const response = await axiosInstance.get(`/lists?last_days_to_check=${days}`);\r\n            const listsOfListOfCountries = response.data.data;\r\n            const amountOfLists = listsOfListOfCountries.length;\r\n            setAmount(amountOfLists);\r\n        }\r\n        fetchData();\r\n        setOpenWindowDialog(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const handleOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleCloseWindowDialog = () => {\r\n        setOpenWindowDialog(false);\r\n    };\r\n\r\n    return (\r\n        <div align=\"center\">\r\n            <FormControl className={classes.formControl}>\r\n                <InputLabel id=\"demo-controlled-open-select-label\"></InputLabel>\r\n                <Select\r\n                    labelId=\"demo-controlled-open-select-label\"\r\n                    id=\"demo-controlled-open-select\"\r\n                    open={open}\r\n                    onClose={handleClose}\r\n                    onOpen={handleOpen}\r\n                    value={selectedDate}\r\n                    onChange={handleChange}\r\n                >\r\n                    <MenuItem value={new Date()}>Today</MenuItem>\r\n                    <MenuItem value={subDays(new Date(), 3)}>In the last 3 days</MenuItem>\r\n                    <MenuItem value={subDays(new Date(), 7)}>In the last week</MenuItem>\r\n                    <MenuItem value={subDays(new Date(), 30)}>In the last month</MenuItem>\r\n                    <MenuItem value={originOfTime}>From the beginning</MenuItem>\r\n                </Select>\r\n            </FormControl>\r\n            <Dialog\r\n                open={openWindowDialog}\r\n                onClose={handleCloseWindowDialog}\r\n                aria-labelledby=\"alert-dialog-title\"\r\n                aria-describedby=\"alert-dialog-description\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-title\">{\"Registered lists\"}</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText id=\"alert-dialog-description\">\r\n                        {`From ${selectedDate.toLocaleDateString(\"en-US\")} to today, the number of registered lists was ${amount}`}\r\n                        {console.log(\"render amount of registered lists\")}\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleCloseWindowDialog} color=\"primary\">\r\n                        Close\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DropMenuOfRegisteredLists;","import React, { useState } from 'react'\r\nimport axios from 'axios';\r\nimport './ListsOfCountriesInfo.css'\r\nimport DropMenuOfRegisteredLists from './DropMenuOfRegisteredLists';\r\nimport 'date-fns';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport {\r\n    MuiPickersUtilsProvider,\r\n    KeyboardDatePicker,\r\n} from '@material-ui/pickers';\r\nimport { differenceInDays } from 'date-fns';\r\nimport { getUserAccessToken } from '../../session-managment/utils';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\n\r\nconst ListsOfCountriesInfo = () => {\r\n\r\n    const [selectedDate, setSelectedDate] = useState(new Date());\r\n    const [amount, setAmount] = useState(99);\r\n    const [openWindowDialog, setOpenWindowDialog] = useState(false);\r\n    const originOfTime = new Date(2020, 0, 1);\r\n\r\n    const handleDateChange = (date) => {\r\n        setSelectedDate(date);\r\n    };\r\n\r\n    const handleCloseWindowDialog = () => {\r\n        setOpenWindowDialog(false);\r\n    };\r\n\r\n    const handleButtonClick = () => {\r\n        const days = differenceInDays(new Date(), selectedDate);\r\n        const axiosInstance = axios.create({\r\n            baseURL: process.env.REACT_APP_API_BASE_URL,\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': getUserAccessToken(),\r\n            }\r\n        });\r\n\r\n        const fetchData = async () => {\r\n            const response = await axiosInstance.get(`/lists?last_days_to_check=${days}`);\r\n            const listsOfListOfCountries = response.data.data;\r\n            const amountOfLists = listsOfListOfCountries.length;\r\n            setAmount(amountOfLists);\r\n        }\r\n        fetchData();\r\n        setOpenWindowDialog(true);\r\n    }\r\n\r\n    return (\r\n        <div className=\"auth-wrapper\">\r\n            <div className=\"box-content\">\r\n                <h2>Number of registered lists</h2>\r\n                <h4>Frequently asked dates</h4>\r\n                <p>Select one of the following options to see the number of registered lists at the date entered</p>\r\n                <DropMenuOfRegisteredLists />\r\n                <br />\r\n                <h4>Select specific date</h4>\r\n                <p>If you need check another date you can use the follow date-picker. Just select a date in it and\r\n                press the check button to see the number of registered lists from the\r\n                date picked to today.</p>\r\n                <div align=\"center\">\r\n                    <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                        <Grid container justify=\"space-around\">\r\n                            <KeyboardDatePicker\r\n                                margin=\"normal\"\r\n                                id=\"date-picker-dialog\"\r\n                                label=\"Select the initial date ...\"\r\n                                format=\"MM/dd/yyyy\"\r\n                                value={selectedDate}\r\n                                onChange={handleDateChange}\r\n                                KeyboardButtonProps={{\r\n                                    'aria-label': 'change date',\r\n                                }}\r\n                                disableFuture={true}\r\n                                minDate={originOfTime}\r\n                                orientation=\"landscape\"\r\n                            />\r\n                        </Grid>\r\n                    </MuiPickersUtilsProvider>\r\n                    <br />\r\n                    <Button onClick={handleButtonClick} variant=\"contained\" color=\"primary\">\r\n                        Check\r\n                    </Button>\r\n                    <Dialog\r\n                        open={openWindowDialog}\r\n                        onClose={handleCloseWindowDialog}\r\n                        aria-labelledby=\"alert-dialog-title\"\r\n                        aria-describedby=\"alert-dialog-description\"\r\n                    >\r\n                        <DialogTitle id=\"alert-dialog-title\">{\"Registered lists\"}</DialogTitle>\r\n                        <DialogContent>\r\n                            <DialogContentText id=\"alert-dialog-description\">\r\n                                {`From ${selectedDate.toLocaleDateString(\"en-US\")} to today, the number of registered lists was ${amount}`}\r\n                                {console.log(\"render amount of registered lists\")}\r\n                            </DialogContentText>\r\n                        </DialogContent>\r\n                        <DialogActions>\r\n                            <Button onClick={handleCloseWindowDialog} color=\"primary\">\r\n                                Close\r\n                            </Button>\r\n                        </DialogActions>\r\n                    </Dialog>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ListsOfCountriesInfo;","import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport { getUserAccessToken } from '../../session-managment/utils'\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\n\r\nconst CheckNumberOfInterestedUsersButton = (props) => {\r\n\r\n    const [open, setOpen] = useState(false);\r\n    const [amount, setAmount] = useState(null);\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const handleClickOpen = () => {\r\n        const axiosInstance = axios.create({\r\n            baseURL: process.env.REACT_APP_API_BASE_URL,\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': getUserAccessToken(),\r\n            }\r\n        });\r\n\r\n        const fetchData = async () => {\r\n            const result = await axiosInstance.get(`/countries/${props.idCountry}/interested_users`);\r\n            setAmount(result.data.amount);\r\n        }\r\n        fetchData();\r\n        setOpen(true);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Button variant=\"outlined\" color=\"primary\" onClick={handleClickOpen}>\r\n                Check\r\n            </Button>\r\n            <Dialog\r\n                open={open}\r\n                onClose={handleClose}\r\n                aria-labelledby=\"alert-dialog-title\"\r\n                aria-describedby=\"alert-dialog-description\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-title\">{`Number of interested users about ${props.countryName}(${props.iso2})`}</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText id=\"alert-dialog-description\">\r\n                        {`The number of users that follows ${props.countryName} at`}\r\n                        {` ${(new Date).toTimeString()} is ${amount}`}\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleClose} color=\"primary\">\r\n                        Close\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CheckNumberOfInterestedUsersButton;\r\n\r\n","import React, { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport axios from 'axios';\r\nimport { getUserAccessToken } from '../../session-managment/utils';\r\nimport CheckNumberOfInterestedUsersButton from './CheckNumberOfInterestedUsersButton'\r\nimport './CountriesTable.css'\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    container: {\r\n        maxHeight: 440,\r\n    },\r\n});\r\n\r\nconst columns = [\r\n    { id: 'idCountry', label: '#' },\r\n    { id: 'flag', label: 'Flag' },\r\n    { id: 'name', label: 'Name' },\r\n    { id: 'iso2', label: 'ISO2', align: 'center' },\r\n    {\r\n        id: 'buttonCheckAmount',\r\n        label: 'Number of interested users',\r\n        align: 'center',\r\n    }\r\n];\r\n\r\nconst createData = (idCountry, flag, name, iso2, buttonCheckAmount) => {\r\n    return { idCountry, flag, name, iso2, buttonCheckAmount };\r\n};\r\n\r\nconst prepareToShow = (countries) => countries.map(country => {\r\n    return createData(\r\n        country.id,\r\n        <img src={`https://www.countryflags.io/${country.iso_2}/shiny/32.png`} alt={country.name} />,\r\n        country.name,\r\n        country.iso_2,\r\n        <CheckNumberOfInterestedUsersButton idCountry={country.id} iso2={country.iso_2} countryName={country.name} />);\r\n});\r\n\r\nconst CountriesTable = () => {\r\n    const classes = useStyles();\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(10);\r\n    const [rows, setRows] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const axiosInstance = axios.create({\r\n            baseURL: process.env.REACT_APP_API_BASE_URL,\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': getUserAccessToken(),\r\n            }\r\n        });\r\n\r\n        const fetchData = async () => {\r\n            const response = await axiosInstance.get('/countries?page=1&limit=253');\r\n            const listOfCountries = response.data.data\r\n            const countriesRows = prepareToShow(listOfCountries);\r\n            setRows(countriesRows);\r\n        }\r\n\r\n        fetchData();\r\n    }, [])\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(+event.target.value);\r\n        setPage(0);\r\n    };\r\n\r\n    return (\r\n        <div className=\"auth-wrapper-table\">\r\n            <div className=\"auth-inner-table\">\r\n                <Paper className={classes.root}>\r\n                    <TableContainer className={classes.container}>\r\n                        <Table stickyHeader aria-label=\"sticky table\">\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    {columns.map((column) => (\r\n                                        <TableCell\r\n                                            key={column.id}\r\n                                            align={column.align}\r\n                                            style={{ minWidth: column.minWidth, fontWeight: 'bold' }}\r\n                                        >\r\n                                            {column.label}\r\n                                        </TableCell>\r\n                                    ))}\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row) => {\r\n                                    return (\r\n                                        <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.code}>\r\n                                            {columns.map((column) => {\r\n                                                const value = row[column.id];\r\n                                                return (\r\n                                                    <TableCell key={column.id} align={column.align}>\r\n                                                        {value}\r\n                                                    </TableCell>\r\n                                                );\r\n                                            })}\r\n                                        </TableRow>\r\n                                    );\r\n                                })}\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                    <TablePagination\r\n                        rowsPerPageOptions={[10, 25, 50, 100]}\r\n                        component=\"div\"\r\n                        count={rows.length}\r\n                        rowsPerPage={rowsPerPage}\r\n                        page={page}\r\n                        onChangePage={handleChangePage}\r\n                        onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                    />\r\n                </Paper>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CountriesTable;","import React, { useState, useEffect } from 'react'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport './app.css'\r\nimport NavBarComponent from '../dashboards/navbar-Cov'\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\nimport SignInComponent from '../sign-in/sign-in';\r\nimport SignUpComponent from '../sign-up/sign-up';\r\nimport HomeComponent from \"../home/home\";\r\nimport ComparisonComponent from '../dashboards/comparison-dashboard/comparison-dashboard'\r\n// import UsersComponent from '../dashboards/users-dashboards'\r\nimport CountriesComponent from '../dashboards/countries-dashboard'\r\nimport ListItemComponent from '../lists/list-item'\r\nimport \"../../assets/sass/burger-menu.css\"\r\nimport ListsComponent from '../dashboards/lists-dashboards'\r\nimport PageNotFound from '../dashboards/page-not-found'\r\nimport { isUserLogin } from \"../session-managment/utils\"\r\nimport PrivateRoute from \"../session-managment/private-route\"\r\nimport SideMenuComponent from \"../side-menu/side-menu\"\r\nimport UsersInfo from \"../admin/users-info/UsersInfo\"\r\nimport ListsOfCountriesInfo from \"../admin/list-info/ListsOfCountriesInfo\"\r\nimport { getUserTypeFromLocalStorage } from './../session-managment/utils';\r\nimport CountriesTable from '../admin/countries-info/CountriesTable';\r\nimport CompareListsOfDifferentUsers from '../admin/compare-lists-of-different-users/CompareListsOfDifferentUsers';\r\n\r\nconst AppComponent = (props) => {\r\n\r\n    const isUserLogged = () => (isUserLogin());\r\n    const [params, setparams] = useState({ isUserLogged: isUserLogin() });\r\n    const [userType, setUserType] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const checkAndSetUserType = () => {\r\n            if (getUserTypeFromLocalStorage() !== null) {\r\n                setUserType(getUserTypeFromLocalStorage());\r\n            }\r\n        }\r\n        checkAndSetUserType();\r\n    }, [userType]);\r\n\r\n    return (\r\n        <div className=\"App\" id=\"root\">\r\n            <SideMenuComponent userType={userType} />\r\n            <NavBarComponent id=\"navCovid\" isUserLogged={params.isUserLogged} />\r\n\r\n            <Switch>\r\n                <Route exact path='/' component={SignInComponent} />\r\n                <Route path=\"/sign-in\" component={SignInComponent} />\r\n                <Route path=\"/sign-up\" component={SignUpComponent} />\r\n                <Route path=\"/log-out\" component={SignUpComponent} />\r\n                <Route path=\"/graphics\" component={ComparisonComponent} />\r\n                {/* <PrivateRoute path=\"/users\" component={UsersComponent} /> */}\r\n                <PrivateRoute path=\"/countries\" component={CountriesComponent} />\r\n                <PrivateRoute path=\"/lists\" component={ListsComponent} />\r\n                <PrivateRoute path=\"/list/:id\" component={ListItemComponent} />\r\n                <PrivateRoute path=\"/home\" component={HomeComponent} />\r\n                {/* Admin Routes */}\r\n                <PrivateRoute path=\"/admin/users\" component={UsersInfo} />\r\n                {/* <Route path=\"/admin/compare\" component={CompareListsOfDifferentUsers} /> */}\r\n                <PrivateRoute path=\"/admin/compare\" component={PageNotFound} />\r\n                <PrivateRoute path=\"/admin/countries\" component={CountriesTable} />\r\n                <PrivateRoute path=\"/admin/lists\" component={ListsOfCountriesInfo} />\r\n                <Route component={PageNotFound} />\r\n            </Switch>\r\n\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default AppComponent;\r\n","import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { getUserAccessToken } from '../../session-managment/utils';\r\n// ControlledTreeView imports\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TreeView from '@material-ui/lab/TreeView';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport TreeItem from '@material-ui/lab/TreeItem';\r\nimport MyTreeItem from './MyTreeItem';\r\n\r\n// ControlledTreeView\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        height: 216,\r\n        flexGrow: 1,\r\n        maxWidth: 400,\r\n    },\r\n});\r\n\r\n// CompareListsOfDifferentUsers\r\nconst fetchUsers = async () => {\r\n    const axiosInstance = axios.create({\r\n        baseURL: process.env.REACT_APP_API_BASE_URL,\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': getUserAccessToken(),\r\n        }\r\n    });\r\n    const response = await axiosInstance.get('/users?page=1&limit=100&order_column=id&order_type=ASC');\r\n    const listOfUsers = response.data.data;\r\n    return listOfUsers;\r\n}\r\n\r\nconst CompareListsOfDifferentUsers = () => {\r\n    const [users, setUsers] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchUsers = async () => {\r\n            const axiosInstance = axios.create({\r\n                baseURL: process.env.REACT_APP_API_BASE_URL,\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': getUserAccessToken(),\r\n                }\r\n            });\r\n            const response = await axiosInstance.get('/users?page=1&limit=100&order_column=id&order_type=ASC');\r\n            const listOfUsers = response.data.data;\r\n            setUsers(listOfUsers);\r\n        }\r\n        fetchUsers();\r\n    }, []\r\n    );\r\n\r\n    // START - ControlledTreeViewLEFT\r\n    const classes = useStyles();\r\n    const [expandedLeft, setExpandedLeft] = useState([]);\r\n    const [selectedLeft, setSelectedLeft] = useState([]);\r\n    const [userLists, setUserLists] = useState([]);\r\n\r\n    const handleToggleLeft = (event, nodeIds) => {\r\n        setExpandedLeft(nodeIds);\r\n    };\r\n\r\n    const handleSelectLeft = (event, nodeIds) => {\r\n        setSelectedLeft(nodeIds);\r\n    };\r\n    // END - ControlledTreeViewLEFT\r\n\r\n    // START - ControlledTreeViewRIGHT\r\n    const [expandedRight, setExpandedRight] = useState([]);\r\n    const [selectedRight, setSelectedRight] = useState([]);\r\n\r\n    const handleToggleRight = (event, nodeIds) => {\r\n        setExpandedRight(nodeIds);\r\n    };\r\n\r\n    const handleSelectRight = (event, nodeIds) => {\r\n        setSelectedRight(nodeIds);\r\n    };\r\n    // END - ControlledTreeViewRIGHT\r\n\r\n    const handleUserClick = (event, userId) => {\r\n        event.preventDefault();\r\n        const axiosInstance = axios.create({\r\n            baseURL: process.env.REACT_APP_API_BASE_URL,\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': getUserAccessToken(),\r\n            }\r\n        });\r\n\r\n        const fetchASpecificUser = async () => {\r\n            const result = await axiosInstance.get(`/users/${userId}`);\r\n            setUserLists(result.data.lists);\r\n        }\r\n        fetchASpecificUser();\r\n    }\r\n\r\n    return (\r\n        <div className=\"auth-wrapper-table\">\r\n            <div className=\"auth-inner-table\">\r\n                {/* ControlledTreeView LEFT */}\r\n                <TreeView\r\n                    className={classes.root}\r\n                    defaultCollapseIcon={<ExpandMoreIcon />}\r\n                    defaultExpandIcon={<ChevronRightIcon />}\r\n                    expanded={expandedLeft}\r\n                    selected={selectedLeft}\r\n                    onNodeToggle={handleToggleLeft}\r\n                    onNodeSelect={handleSelectLeft}\r\n                >\r\n                    {\r\n                        users.map(user => {\r\n                            return (\r\n                                <TreeItem nodeId={user.id} label={user.email} onLabelClick={(event) => handleUserClick(event, user.id)}>\r\n                                    {userLists.map(list => {\r\n                                        return (\r\n                                            <MyTreeItem nodeId={list.id} label={list.name} />\r\n                                        )\r\n                                    })}\r\n                                </TreeItem>\r\n                            )\r\n                        })\r\n                    }\r\n                </TreeView>\r\n                <br />\r\n                <br />\r\n                {/* ControlledTreeView RIGHT */}\r\n                {/* <TreeView\r\n                    className={classes.root}\r\n                    defaultCollapseIcon={<ExpandMoreIcon />}\r\n                    defaultExpandIcon={<ChevronRightIcon />}\r\n                    expanded={expandedRight}\r\n                    selected={selectedRight}\r\n                    onNodeToggle={handleToggleRight}\r\n                    onNodeSelect={handleSelectRight}\r\n                >\r\n                    {\r\n                        users.map(user => {\r\n                            return (\r\n                                <TreeItem nodeId={user.id} label={user.email}>\r\n                                    <TreeItem nodeId=\"5\" label=\"Calendar\" />\r\n                                    <TreeItem nodeId=\"6\" label=\"Chrome\" />\r\n                                    <TreeItem nodeId=\"7\" label=\"Webstorm\" />\r\n                                </TreeItem>\r\n                            )\r\n                        })\r\n                    }\r\n                </TreeView> */}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CompareListsOfDifferentUsers;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './assets/sass/global.scss';\nimport AppComponent from './components/app/app';\nimport * as serviceWorker from './service-worker';\n\nReactDOM.render(\n    <BrowserRouter>\n        <AppComponent />\n    </BrowserRouter>,\n    document.getElementById('root')\n);\n\nserviceWorker.unregister();"],"sourceRoot":""}